""" 사과는 상태에 따라 1점부터 k점까지의 점수로 분류하며, k점이 최상품의 사과이고 1점이 최하품의 사과입니다.
한 상자에 사과를 m개씩 담아 포장합니다. 상자에 담긴 사과 중 가장 낮은 점수가 p (1 ≤ p ≤ k)점인 경우, 사과 한 상자의 가격은 p * m 입니다.
과일 장수가 가능한 많은 사과를 팔았을 때, 얻을 수 있는 최대 이익을 계산하고자 합니다.(사과는 상자 단위로만 판매하며, 남는 사과는 버립니다)

(최저 사과 점수) x (한 상자에 담긴 사과 개수) x (상자의 개수) = 2 x 4 x 1 = 8

사과의 최대 점수 k, 한 상자에 들어가는 사과의 수 m, 사과들의 점수 score가 주어졌을 때, 과일 장수가 얻을 수 있는 최대 이익을 return하는 solution 함수를 완성해주세요."""

# 정렬(Sorting) + 구간 묶음(Grouping) 을 이용한 탐욕적(Greedy) 최적화 문제
# 핵심개념 
""" 1. 높은 점수의 사과부터 상자를 채워야 이익이 최대화됨 : (Greedy= 높은 점수부터 묶기)
    2. SCORE를 내림차순 정렬 
    3. m개씩 묶은 뒤 마지막(=가장 낮은 점수)값을 기준으로 가격 계산) """

def solution(k, m, score): 

  total = 0
  for i in range(m-1, len(score), m): # 정렬 + 그룹화: m개 단위로 나누기
    total += score[i] * m  # 정렬+그룹화-m개단위로 나누기 
  return total # 👉 결국, 수익 = (각 상자의 최저 점수 × m)의 총합
  
      """
      score[i]는 각 상자의 최저 점수 
      range(m-1, len(score), m)는 m개씩 묶었을 때 마지막 인덱스
      남은 사과(len(socre)%m)는 버림
      """
